#!/usr/bin/env python
import sys,os,socket
import string,re
import subprocess
import time

trib = "/usr/bin/redis-trib.rb"
desired_masters = 3
desired_replicas = 1

# Functions
def findMasters(host,port="6379"):
    """Get count of masters for particular node"""
    masters = 0
    cmd = subprocess.Popen(trib + " check " + host + ":" + port, shell=True, stdout=subprocess.PIPE)
    cmd.wait()
    for line in cmd.stdout:
        if "M:" in line:
            masters = masters + 1
    return masters

def getip():
    s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    try:
        # doesn't have to be reachable
        s.connect(('10.255.255.255', 1))
        IP = s.getsockname()[0]
    except:
        IP = '127.0.0.1'
    finally:
        s.close()
    return IP

def printLog(log=""):
    pre_log = "volatile-cluster: "
    print pre_log + log

# main

if findMasters("localhost") > 3:
    sys.exit(0)

while True:
#    """Search for cluster until some found"""
    ready_list = []
    master = ""
    # join as slave by default
    as_slave = "--slave"
    local_addr = getip()
    printLog("local_addr = " + local_addr)
    """Get ips of all redis nodes"""
    p1 = subprocess.Popen(['AWS_DEFAULT_REGION={{ ansible_ec2_placement_region }} aws ec2 describe-instances --query "Reservations[].Instances[].[InstanceId,PrivateIpAddress,Tags[?Key==' + "'aws:cloudformation:stack-name'" + '].Value]" --output=text | grep -w -i -B1 {{ec2_tags['tags'][''vg:stack]}}'], shell = True, stdout=subprocess.PIPE)
    p1.wait()
    res = p1.stdout.read()
    nodes_ip_list = re.findall('[0-9]{1,3}[\.][0-9]{1,3}[\.][0-9]{1,3}[\.][0-9]{1,3}', res)
    nodes_ip_list.sort()
    printLog("Found nodes: " + str(nodes_ip_list))
    """Search for ready nodes"""
    for addr in nodes_ip_list:
        try:
            masters = findMasters(addr)
        except:
            masters = 0
        if masters > 0:
            ready_list.append(addr)
    printLog("Ready nodes: " + str(ready_list))
    printLog("First node: " + str(ready_list[0]))
    """Search for nodes already in cluster"""
    for addr in ready_list:
        try:
            printLog("Checking: " + str(addr))
            masters = findMasters(addr)
        except:
            masters = 0

        if masters >= desired_masters:
            printLog("Cluster found on " + str(addr))
            master = addr
        elif masters < desired_masters and master == "":
            printLog("Two masters cluster found on " + str(addr))
            master = addr
            as_slave = ""

    """Redeclare nodes to avoid their reusage in loop"""
    nodes = ""; slaves = ""

    """Decide to create cluster or join existing if present"""
    if master == "":
        """Create cluster"""
        printLog("No cluster found. Checking if I should create one.")
        if local_addr == ready_list[0]:
            """Attempt to create cluster if current node is first in the list"""
            printLog("I will be the first node in cluster")
            if len(ready_list) >= desired_masters:
                """Proceed if there are enough nodes to create masters pool"""
                i = 0
                """Fill variables with nodes IPs"""
                for node in ready_list:
                    if i < desired_masters:
                        nodes += str(node) + ":6379 "
                    else:
                        slaves += str(node) + ":6379 "
                    i += 1
                if len(ready_list) >= (desired_masters + (desired_masters * desired_replicas)):
                    """Create cluster with replicas if there are enough nodes"""
                    printLog("Creating cluster with replicas")
                    replicas = desired_replicas
                else:
                    printLog("Creating cluster without replicas")
                    replicas = 0
                    slaves = ""
                """Try to create cluster and exit with return code"""
                try:
                    cmd = subprocess.Popen(trib + " create --replicas " + str(replicas) + " " + nodes + slaves, shell=True, stdout=subprocess.PIPE)
                    cmd.wait()
                    if cmd.returncode == 0:
                        printLog("Cluster created")
                        printLog(str(cmd.stdout.read()))
                        sys.exit(cmd.returncode)
                    else:
                        printLog("Failed to create cluster")
                        printLog(str(cmd.stdout.read()))
                        sys.exit(cmd.returncode)
                except OSError as e:
                    printLog("Something went wrong")
                    printLog(str(e))
                    sys.exit(1)
            elif len(ready_list) < desired_masters:
                printLog("Not enough nodes to create cluster")
    else:
                """Joining existing cluster"""
                printLog("Joining existing cluster on " + master)
                try:
                    cmd = subprocess.Popen(trib + " add-node " + as_slave + local_addr + ":6379 " + master + ":6379 ", shell=True, stdout=subprocess.PIPE)
                    cmd.wait()
                    if cmd.returncode == 0:
                        printLog("Node joined cluster")
                        printLog(str(cmd.stdout.read()))
                        sys.exit(cmd.returncode)
                    else:
                        printLog("Failed to join cluster")
                        printLog(str(cmd.stdout.read()))
                        sys.exit(cmd.returncode)
                except OSError as e:
                        printLog("Something went wrong")
                        printLog(str(e))
                        sys.exit(1)
    time.sleep(10)
